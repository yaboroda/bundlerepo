#!/usr/bin/env python2
import json
import sys
import os
from subprocess import Popen, PIPE, call
import shutil

VENDOR_PATH = './vendor/'
LOCK_FILE_PATH = './composer.lock'


def getData(path):
    if not os.path.isfile(path):
        print "ERROR: composer.lock not found"
        exit()

    with open('composer.lock') as f:
        data = json.load(f)
    return data


def getPackageData(package_name, path=LOCK_FILE_PATH):
    data = getData(path)

    for package in data['packages']:
        if package['name'] == package_name:
            return package

    print "ERROR: package not found"
    exit()


def getPackagePath(package):
    return VENDOR_PATH + package['name']


def getPackageUrl(package, username=''):
    if 'source' not in package or 'url' not in package['source']:
        print "ERROR: can\'t find url"
        exit()
    url = package['source']['url']
    if(username):
        url = insertUsernameIntoUrl(url, username);
    return url


def getPackageType(package):
    if 'source' not in package or 'type' not in package['source']:
        print "ERROR: can\'t find url"
        exit()
    p_type = package['source']['type']
    return p_type


def insertUsernameIntoUrl(url, username):
    parts = url.split('//')
    url = parts[0] + '//' + username + '@' + parts[1]
    return url


def cloneRepo(p_type, url, path):
    cmd = p_type+' clone '+url+' '+path
    print cmd
    call(cmd, shell=True)


def rmDir(path):
    if os.path.isdir(path):
        shutil.rmtree(path)


def printHelp():
    print "usage:"
    print "bundlerepo package_name [user_name]"


def ask(path, url, username):
    print "directory "+path
    print "will be replaced with repository "+url
    if(username):
        print "with username "+username
    print "press Enter to continue"
    print "press Ctrl+C to interrupt"
    try:
        raw_input()
    except (KeyboardInterrupt, SystemExit):
        print ""
        exit()


if __name__ == "__main__":
    if len(sys.argv) < 2:
        printHelp()
        exit()
    if len(sys.argv) == 2:
        username = ''
    if len(sys.argv) == 3:
        username = sys.argv[2]
    if len(sys.argv) > 3:
        print "ERROR: too many arguments"
        exit()

    package = getPackageData(sys.argv[1])
    path = getPackagePath(package)
    url = getPackageUrl(package, username)
    p_type = getPackageType(package)

    ask(path, url, username)
    rmDir(path)
    cloneRepo(p_type, url, path)